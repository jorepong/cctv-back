# Generated by Django 5.2.1 on 2025-05-17 11:28

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cameras',
            fields=[
                ('camera_id', models.AutoField(help_text='카메라 고유 ID', primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='카메라 이름 (예: 신공학관 9층 엘리베이터 앞)', max_length=255)),
                ('rtsp_url', models.CharField(blank=True, help_text='RTSP 스트리밍 URL (외부 CCTV용)', max_length=512, null=True)),
                ('source_type', models.CharField(choices=[('TESTBED', '테스트베드 (TESTBED)'), ('WONWOO_REMOTE', '원우 리모트 (WONWOO_REMOTE)'), ('YOUTUBE_LIVE', '유튜브 라이브 (YOUTUBE_LIVE)')], default='TESTBED', help_text='카메라 소스 타입 (TESTBED, WONWOO_REMOTE, YOUTUBE_LIVE)', max_length=50)),
                ('location_description', models.TextField(blank=True, help_text='설치 위치 상세 설명', null=True)),
                ('resolution_width', models.IntegerField(blank=True, help_text='해상도 너비', null=True)),
                ('resolution_height', models.IntegerField(blank=True, help_text='해상도 높이', null=True)),
                ('status', models.CharField(choices=[('ACTIVE', '활성 (ACTIVE)'), ('INACTIVE', '비활성 (INACTIVE)'), ('ERROR', '오류 (ERROR)')], default='ACTIVE', help_text='카메라 상태 (ACTIVE, INACTIVE, ERROR)', max_length=20)),
                ('is_active_monitoring', models.BooleanField(default=True, help_text='현재 모니터링(분석) 대상 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='레코드 생성 시각')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='레코드 수정 시각')),
            ],
            options={
                'verbose_name': '카메라 (Camera)',
                'verbose_name_plural': '카메라 목록 (Cameras)',
                'db_table': 'Cameras',
            },
        ),
        migrations.CreateModel(
            name='Snapshots',
            fields=[
                ('snapshot_id', models.BigAutoField(help_text='스냅샷 고유 ID', primary_key=True, serialize=False)),
                ('captured_at', models.DateTimeField(help_text='스냅샷 캡처 시각')),
                ('image_path', models.CharField(help_text='저장된 원본 이미지 파일 경로 (서버 내 경로)', max_length=512)),
                ('processed_image_path', models.CharField(blank=True, help_text='AI 분석 후 바운딩 박스 등이 그려진 처리된 이미지 파일 경로 (서버 내 경로)', max_length=512, null=True)),
                ('processing_status_ai', models.CharField(choices=[('PENDING', '대기중 (PENDING)'), ('PROCESSING', '처리중 (PROCESSING)'), ('COMPLETED', '완료 (COMPLETED)'), ('FAILED', '실패 (FAILED)')], default='PENDING', help_text='AI 분석 처리 상태 (PENDING, PROCESSING, COMPLETED, FAILED)', max_length=20)),
                ('processing_status_congestion', models.CharField(choices=[('PENDING', '대기중 (PENDING)'), ('PROCESSING', '처리중 (PROCESSING)'), ('COMPLETED', '완료 (COMPLETED)'), ('FAILED', '실패 (FAILED)')], default='PENDING', help_text='밀집도 계산 처리 상태 (PENDING, PROCESSING, COMPLETED, FAILED)', max_length=20)),
                ('analyzed_at_ai', models.DateTimeField(blank=True, help_text='AI 분석 완료 시각', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('camera', models.ForeignKey(help_text='촬영된 카메라 ID', on_delete=django.db.models.deletion.CASCADE, related_name='snapshots', to='analytics.cameras')),
            ],
            options={
                'verbose_name': '스냅샷 (Snapshot)',
                'verbose_name_plural': '스냅샷 목록 (Snapshots)',
                'db_table': 'Snapshots',
            },
        ),
        migrations.CreateModel(
            name='DetectedObjects',
            fields=[
                ('detection_id', models.BigAutoField(help_text='객체 탐지 고유 ID', primary_key=True, serialize=False)),
                ('object_track_id', models.IntegerField(blank=True, help_text='객체 추적 ID (2학기 활용 가능)', null=True)),
                ('class_label', models.CharField(default='person', help_text='탐지된 객체 종류 (주로 person)', max_length=50)),
                ('confidence', models.FloatField(blank=True, help_text='탐지 신뢰도', null=True)),
                ('bbox_x', models.IntegerField(help_text='바운딩 박스 좌상단 x 좌표')),
                ('bbox_y', models.IntegerField(help_text='바운딩 박스 좌상단 y 좌표')),
                ('bbox_width', models.IntegerField(help_text='바운딩 박스 너비')),
                ('bbox_height', models.IntegerField(help_text='바운딩 박스 높이')),
                ('center_x', models.IntegerField(blank=True, help_text='객체 중심 x 좌표 (2학기 분석용)', null=True)),
                ('center_y', models.IntegerField(blank=True, help_text='객체 중심 y 좌표 (2학기 분석용)', null=True)),
                ('snapshot', models.ForeignKey(help_text='분석된 스냅샷 ID', on_delete=django.db.models.deletion.CASCADE, related_name='detected_objects', to='analytics.snapshots')),
            ],
            options={
                'verbose_name': '탐지된 객체 (Detected Object)',
                'verbose_name_plural': '탐지된 객체 목록 (Detected Objects)',
                'db_table': 'Detected_Objects',
            },
        ),
        migrations.CreateModel(
            name='CongestionEvents',
            fields=[
                ('event_id', models.BigAutoField(help_text='혼잡도 이벤트 고유 ID', primary_key=True, serialize=False)),
                ('event_timestamp', models.DateTimeField(help_text='혼잡도 측정/이벤트 발생 시각')),
                ('person_count', models.IntegerField(help_text='해당 시점/스냅샷에서 탐지된 총 사람 수')),
                ('estimated_roi_pixel_area', models.IntegerField(blank=True, help_text='추정된 ROI 픽셀 면적 (1학기에는 단순 값, 2학기 정밀 계산)', null=True)),
                ('congestion_value_raw', models.FloatField(blank=True, help_text='계산된 원시 밀집도 값 (예: person_count / estimated_roi_pixel_area)', null=True)),
                ('congestion_level', models.CharField(choices=[('LOW', '낮음 (LOW)'), ('MEDIUM', '중간 (MEDIUM)'), ('HIGH', '높음 (HIGH)'), ('VERY_HIGH', '매우 높음 (VERY_HIGH)')], help_text='최종 판정된 혼잡도 수준 (LOW, MEDIUM, HIGH 등)', max_length=20)),
                ('comparison_historical_avg_count', models.IntegerField(blank=True, help_text='비교 기준으로 사용된 과거 동일 시간대 평균 인원 수', null=True)),
                ('alert_triggered', models.BooleanField(default=False, help_text='위험 상황 알림 발생 여부')),
                ('is_acknowledged', models.BooleanField(default=False, help_text='해당 이벤트(알림)에 대한 관리자 확인 여부')),
                ('acknowledged_at', models.DateTimeField(blank=True, help_text='관리자가 해당 이벤트(알림)를 확인한 시각', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('camera', models.ForeignKey(help_text='대상 카메라 ID', on_delete=django.db.models.deletion.CASCADE, related_name='congestion_events', to='analytics.cameras')),
                ('snapshot', models.ForeignKey(blank=True, help_text='이벤트 계산에 사용된 대표 스냅샷 ID', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='congestion_events', to='analytics.snapshots')),
            ],
            options={
                'verbose_name': '혼잡도 이벤트 (Congestion Event)',
                'verbose_name_plural': '혼잡도 이벤트 목록 (Congestion Events)',
                'db_table': 'Congestion_Events',
            },
        ),
        migrations.CreateModel(
            name='ROIDefinitions',
            fields=[
                ('roi_def_id', models.AutoField(help_text='ROI 정의 고유 ID', primary_key=True, serialize=False)),
                ('definition_type', models.CharField(choices=[('MANUAL_POLYGON', '수동 폴리곤'), ('DYNAMIC_CONVEX_HULL', '동적 컨벡스 헐'), ('MOTION_PATTERN_BASED', '움직임 패턴 기반')], help_text='ROI 정의 방식 (MANUAL_POLYGON, DYNAMIC_CONVEX_HULL, MOTION_PATTERN_BASED)', max_length=50)),
                ('definition_data', models.JSONField(blank=True, help_text='ROI 정의 데이터 (폴리곤 좌표, 파라미터 등)', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='현재 사용 중인 ROI 정의인지 여부')),
                ('version', models.IntegerField(default=1, help_text='ROI 정의 버전')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera', models.ForeignKey(help_text='대상 카메라 ID', on_delete=django.db.models.deletion.CASCADE, related_name='roi_definitions', to='analytics.cameras')),
            ],
            options={
                'verbose_name': 'ROI 정의 (ROI Definition)',
                'verbose_name_plural': 'ROI 정의 목록 (ROI Definitions)',
                'db_table': 'ROI_Definitions',
                'indexes': [models.Index(fields=['camera', 'is_active'], name='ROI_Definit_camera__71af3e_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='snapshots',
            index=models.Index(fields=['camera'], name='Snapshots_camera__405b5b_idx'),
        ),
        migrations.AddIndex(
            model_name='snapshots',
            index=models.Index(fields=['captured_at'], name='Snapshots_capture_60dfbb_idx'),
        ),
        migrations.AddIndex(
            model_name='snapshots',
            index=models.Index(fields=['processing_status_ai'], name='Snapshots_process_034201_idx'),
        ),
        migrations.AddIndex(
            model_name='snapshots',
            index=models.Index(fields=['processing_status_congestion'], name='Snapshots_process_545c2b_idx'),
        ),
        migrations.AddIndex(
            model_name='detectedobjects',
            index=models.Index(fields=['snapshot'], name='Detected_Ob_snapsho_93cc6d_idx'),
        ),
        migrations.AddIndex(
            model_name='detectedobjects',
            index=models.Index(fields=['class_label'], name='Detected_Ob_class_l_cd6843_idx'),
        ),
        migrations.AddIndex(
            model_name='congestionevents',
            index=models.Index(fields=['camera', 'event_timestamp'], name='idx_congestion_camera_time'),
        ),
        migrations.AddIndex(
            model_name='congestionevents',
            index=models.Index(fields=['snapshot'], name='Congestion__snapsho_f2f32a_idx'),
        ),
        migrations.AddIndex(
            model_name='congestionevents',
            index=models.Index(fields=['congestion_level'], name='Congestion__congest_a4ef60_idx'),
        ),
        migrations.AddIndex(
            model_name='congestionevents',
            index=models.Index(fields=['is_acknowledged'], name='Congestion__is_ackn_d107c5_idx'),
        ),
    ]
